<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dingus</title>
  <subtitle>A brief technical post every other week from Chris Lowder</subtitle>
  <id>https://dingus.clowder.name/</id>
  <link href="https://dingus.clowder.name/"/>
  <link href="https://dingus.clowder.name/feed.xml" rel="self"/>
  <updated>2022-07-08T09:46:00+01:00</updated>
  <author>
    <name>Chris Lowder</name>
  </author>
  <entry>
    <title>Generating secure tokens from an array in Ruby</title>
    <link rel="alternate" href="https://dingus.clowder.name/2022/07/08/generating-secure-tokens-from-an-array-in-ruby.html"/>
    <id>https://dingus.clowder.name/2022/07/08/generating-secure-tokens-from-an-array-in-ruby.html</id>
    <published>2022-07-08T09:46:00+01:00</published>
    <updated>2022-07-08T09:46:00+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">Learn how to generate secure tokens from an array of characters or a wordlist in Ruby</summary>
    <content type="html">&lt;p&gt;Ruby&amp;rsquo;s &lt;code class="prettyprint"&gt;SecureRandom&lt;/code&gt; provides a random number generator suitable for
generating secure tokens. But it doesn&amp;rsquo;t allow the user to specify a source
array, for example an array of characters or a &lt;a href="https://github.com/bitcoin/bips/blob/df443f8db30862b4776b4c06c47b62ded0790dc5/bip-0039/bip-0039-wordlists.md" rel="nofollow noopener noreferrer"&gt;wordlist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;By contrast Ruby&amp;rsquo;s &lt;code class="prettyprint"&gt;[Array#sample]&lt;/code&gt; allows us to build a random sequence from
any array. But it uses a psudo-random number generator and the sequences it
generates are deterministic (guessable) and not suitable for generating secure
tokens.&lt;/p&gt;

&lt;p&gt;Luckily these two can work together. By specifiying &lt;code class="prettyprint"&gt;SecureRandom&lt;/code&gt; as the
source of randomness for &lt;code class="prettyprint"&gt;[Array#sample]&lt;/code&gt; we can generate a secure token from
any array.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"a"&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="s2"&gt;"z"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;random: &lt;/span&gt;&lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;each_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:join&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; "hcqo-dtnf-gsim-bawu-kvjy"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="n"&gt;wordlist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%w[abandon ability ... zone zoo]&lt;/span&gt;
&lt;span class="n"&gt;wordlist&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;random: &lt;/span&gt;&lt;span class="no"&gt;SecureRandom&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# # =&amp;gt; "item recycle habit almost few beach"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="prettyprint"&gt;[Array#shuffle]&lt;/code&gt; and &lt;code class="prettyprint"&gt;[Array#shuffle!]&lt;/code&gt; also accept the &lt;code class="prettyprint"&gt;random&lt;/code&gt; argument.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Compiling the Raspberry Pi Pico SDK on Apple Silicon</title>
    <link rel="alternate" href="https://dingus.clowder.name/2022/06/10/compiling-the-raspberry-pi-pico-sdk-on-apple-silicon.html"/>
    <id>https://dingus.clowder.name/2022/06/10/compiling-the-raspberry-pi-pico-sdk-on-apple-silicon.html</id>
    <published>2022-06-10T16:46:00+01:00</published>
    <updated>2022-06-10T16:46:00+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">Get up-and-running building apps for the Raspberry&amp;nbsp;Pi&amp;nbsp;Pico on MacOS running on Apple Silicon.</summary>
    <content type="html">&lt;p&gt;Getting up-and-running building apps with the Raspberry&amp;nbsp;Pi&amp;nbsp;Pico SDK
on MacOS isn&amp;rsquo;t straight forward if your machine runs on Apple silicon.Homebrew
installs a broken version ARM GCC tool-chain (v11.2). This version throws
seemingly arbitrary &lt;code class="prettyprint"&gt;internal compiler error: Illegal instruction&lt;/code&gt; errors in
builds.&lt;/p&gt;

&lt;p&gt;Fortunately the previous version (v10.3) doesn&amp;rsquo;t suffer from the same issue.
But Homebrew makes it tricky to past previous versions of cask formula,
requiring users to dig out the revision and host a &amp;ldquo;tap&amp;rdquo; to install from. To
make it easier to get up-and-running quickly I&amp;rsquo;ve pulled together the Homebrew
tap, SDK, a &amp;ldquo;hello world&amp;rdquo; application and a README into a repo:&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/clowder/rpi-pico-macos-starter" rel="nofollow noopener noreferrer"&gt;https://github.com/clowder/rpi-pico-macos-starter&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Highlighting search results with Textacular</title>
    <link rel="alternate" href="https://dingus.clowder.name/2022/05/30/highlighting-search-results-with-textacular.html"/>
    <id>https://dingus.clowder.name/2022/05/30/highlighting-search-results-with-textacular.html</id>
    <published>2022-05-30T18:30:00+01:00</published>
    <updated>2022-06-16T14:58:28+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">Add highlighting to your Textacular seach results using Postgres's ts_headline.</summary>
    <content type="html">&lt;p&gt;It&amp;rsquo;s possible to leverage Postgres&amp;rsquo;s &lt;code class="prettyprint"&gt;ts_headline&lt;/code&gt;&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; to add highlighting of
matched fragments in search results. With a caveat, the search fields need to
be declared ahead of time.&lt;/p&gt;

&lt;p&gt;To highlight a &lt;code class="prettyprint"&gt;basic_search&lt;/code&gt; each column to be highlighted needs to be
&lt;code class="prettyprint"&gt;SELECT&lt;/code&gt;-ed using &lt;code class="prettyprint"&gt;ts_headline&lt;/code&gt; with the query string parsed with
&lt;code class="prettyprint"&gt;plainto_tsquery&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Post&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;ApplicationRecord&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;basic_search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;title: &lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;sanitize_sql_array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"ts_headline(title, plainto_tsquery(?))"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; as title_highlighted"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this blog&amp;rsquo;s post titles for testing we see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;[0] pry(main)&amp;gt; Post.search("server Rack").map(&amp;amp;:attributes)
  Post Load (3.1ms)  SELECT "posts".*, COALESCE(ts_rank(to_tsvector('english', "posts"."title"::text), plainto_tsquery('english', 'server\ Rack'::text)), 0) AS "rank35483819984107261", ts_headline(title, plainto_tsquery('server Rack')) as title_highlighted FROM "posts" WHERE (to_tsvector('english', "posts"."title"::text) @@ plainto_tsquery('english', 'server\ Rack'::text)) ORDER BY "rank35483819984107261" DESC
=&amp;gt; [{"id"=&amp;gt;4,
  "title"=&amp;gt;"Server-sent events with Rails and Rack hijack",
  "created_at"=&amp;gt;Mon, 30 May 2022 17:30:29.806047000 UTC +00:00,
  "updated_at"=&amp;gt;Mon, 30 May 2022 17:30:29.806047000 UTC +00:00,
  "rank35483819984107261"=&amp;gt;0.085297264,
  "title_highlighted"=&amp;gt;"&amp;lt;b&amp;gt;Server&amp;lt;/b&amp;gt;-sent events with Rails and &amp;lt;b&amp;gt;Rack&amp;lt;/b&amp;gt; hijack"}]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To work for an &lt;code class="prettyprint"&gt;advanced_search&lt;/code&gt; the query string should be passed to
&lt;code class="prettyprint"&gt;to_tsquery&lt;/code&gt; and &lt;code class="prettyprint"&gt;web_search&lt;/code&gt; to &lt;code class="prettyprint"&gt;websearch_to_tsquery&lt;/code&gt;.&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE" rel="nofollow noopener noreferrer"&gt;https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref1"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Cheap context switching with git-worktree</title>
    <link rel="alternate" href="https://dingus.clowder.name/2022/04/01/cheap-context-switching-with-git-worktree.html"/>
    <id>https://dingus.clowder.name/2022/04/01/cheap-context-switching-with-git-worktree.html</id>
    <published>2022-04-01T11:55:00+01:00</published>
    <updated>2022-06-16T14:58:28+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">Quickly switch between in-progress tasks using git-worktree.</summary>
    <content type="html">&lt;p&gt;Git supports multiple checkouts from a single repository, allowing for multiple
working directories linked to a single repository.&lt;/p&gt;

&lt;p&gt;For arguments sake let&amp;rsquo;s say you&amp;rsquo;re working in a feature branch and spot a
typo. Damn! Instead of committing work-in-progress to switch branches
&lt;a href="https://git-scm.com/docs/git-worktree" rel="nofollow noopener noreferrer"&gt;git-worktree&lt;/a&gt; can checkout another branch to a temporary working directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ git worktree add ../copy-changes main
$ cd ../copy-changes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once complete you return to you&amp;rsquo;re main working directory and clean-up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;$ cd ../web-app
$ git worktree remove ../copy-changes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="text-7xl cursor-wand" title="Git is magic"&gt;🧙🏻‍♂️&lt;/span&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Active Record `find_each` using Postges cursors</title>
    <link rel="alternate" href="https://dingus.clowder.name/2022/03/18/active-record-find-each-using-cursors.html"/>
    <id>https://dingus.clowder.name/2022/03/18/active-record-find-each-using-cursors.html</id>
    <published>2022-03-18T13:26:00+00:00</published>
    <updated>2022-06-16T14:58:28+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">Implement a cursor based version of Rails's `find_each` for Postgres</summary>
    <content type="html">&lt;p&gt;Active Record&amp;rsquo;s &lt;a href="https://api.rubyonrails.org/classes/ActiveRecord/Batches.html#method-i-find_each" rel="nofollow noopener noreferrer"&gt;&lt;code class="prettyprint"&gt;find_each&lt;/code&gt;&lt;/a&gt; is the go-to method for loading a large number
of records in an efficient way. Under the hood it uses &lt;code class="prettyprint"&gt;OFFSET&lt;/code&gt; and &lt;code class="prettyprint"&gt;LIMIT&lt;/code&gt; to
load records in batches and &lt;code class="prettyprint"&gt;yield&lt;/code&gt; them to our block. One drawback to this
approach is Rails requires records to be ordered by their primary key, despite
Postges only requiring the &lt;code class="prettyprint"&gt;ORDER&lt;/code&gt; to be unique&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Not ideal!&lt;/p&gt;

&lt;p&gt;With Postgres it&amp;rsquo;s possible to solve this problem using another tool called a
cursor. These can wrap &lt;em&gt;any&lt;/em&gt; query, ordered any way,  and make it possible to
fetch it&amp;rsquo;s results incrementally&lt;sup id="fnref2"&gt;&lt;a href="#fn2"&gt;2&lt;/a&gt;&lt;/sup&gt;. But unfortuantly Rails doesn&amp;rsquo;t have
native support for Postgres cursors.&lt;/p&gt;

&lt;p&gt;Spelunking Rails&amp;rsquo;s issues on Github your author stumbled across
&lt;a href="https://github.com/rails/rails/issues/28085#issuecomment-457909168" rel="nofollow noopener noreferrer"&gt;rails/rails#28085&lt;/a&gt;, which contains a monkey patch impementing a variant of
&lt;code class="prettyprint"&gt;find_each&lt;/code&gt; using cursors.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight ruby"&gt;&lt;code&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ActiveRecord&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Batches&lt;/span&gt;
    &lt;span class="c1"&gt;# Implements `find_each` variant using cursors. Source:&lt;/span&gt;
    &lt;span class="c1"&gt;# https://github.com/rails/rails/issues/28085#issuecomment-457909168&lt;/span&gt;
    &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="c1"&gt;# Our changes:&lt;/span&gt;
    &lt;span class="c1"&gt;# * `break` condition avoids extra iteration on small sets&lt;/span&gt;
    &lt;span class="c1"&gt;# * use Active Records safe string replacement in `find_by_sql`&lt;/span&gt;
    &lt;span class="c1"&gt;# * simplify cursor definition based on Postgres defaults (more inline)&lt;/span&gt;
    &lt;span class="c1"&gt;# * remove redundant references `self`&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;batched_each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;count: &lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;transaction&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="c1"&gt;# Cursors are created `WITHOUT HOLD` by default and cannot be used&lt;/span&gt;
        &lt;span class="c1"&gt;# outside of the transaction that created them. `NO SCROLL` specifies&lt;/span&gt;
        &lt;span class="c1"&gt;# the cursor cannot be used to retrieve rows in a non-sequential&lt;/span&gt;
        &lt;span class="c1"&gt;# fashion.&lt;/span&gt;
        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"DECLARE pc NO SCROLL CURSOR FOR &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;to_sql&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="kp"&gt;loop&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
          &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_by_sql&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;"FETCH FORWARD ? FROM pc"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;block&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
          &lt;span class="k"&gt;break&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
        &lt;span class="k"&gt;end&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/current/queries-limit.html" rel="nofollow noopener noreferrer"&gt;https://www.postgresql.org/docs/current/queries-limit.html&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref1"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;&lt;a href="https://www.postgresql.org/docs/current/sql-declare.html" rel="nofollow noopener noreferrer"&gt;https://www.postgresql.org/docs/current/sql-declare.html&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref2"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Recursive SQL</title>
    <link rel="alternate" href="https://dingus.clowder.name/2022/03/04/recursive-sql.html"/>
    <id>https://dingus.clowder.name/2022/03/04/recursive-sql.html</id>
    <published>2022-03-04T12:25:00+00:00</published>
    <updated>2022-06-16T14:58:28+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <summary type="html">Learn how to write recursive SQL queries in Postgres.</summary>
    <content type="html">&lt;p&gt;This week I encountered SQL&amp;rsquo;s recursive query syntax&lt;sup id="fnref1"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt; for the first time,
using the &lt;code class="prettyprint"&gt;WITH RECURSIVE&lt;/code&gt; common table expression syntax.&lt;/p&gt;

&lt;p&gt;Given an sample hierarchy of book genres we can build up a table of breadcumbs:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;parent_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Science Fiction&lt;/td&gt;
&lt;td&gt;NULL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Dystopian&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Cyberpunk&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;Space opera&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight sql"&gt;&lt;code&gt;&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;RECURSIVE&lt;/span&gt; &lt;span class="n"&gt;linages&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
  &lt;span class="c1"&gt;-- The non-recursive base case, top-level parents only&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;ARRAY&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;genre_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;tail_id&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;genres&lt;/span&gt;
  &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;

  &lt;span class="k"&gt;UNION&lt;/span&gt; &lt;span class="k"&gt;ALL&lt;/span&gt;

  &lt;span class="c1"&gt;-- Recursively join sub-genres to their parent&lt;/span&gt;
  &lt;span class="k"&gt;SELECT&lt;/span&gt;
    &lt;span class="n"&gt;linages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;genre_names&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;genre_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;tail_id&lt;/span&gt;
  &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;genres&lt;/span&gt;
  &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;linages&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;genres&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail_id&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;ARRAY_TO_STRING&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;linages&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;genre_names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;' → '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;breadcumb&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;linages&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result contains every generation of the recursion.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;breadcumb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Science Fiction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Science Fiction → Space opera&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Science Fiction → Dystopian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Science Fiction → Dystopian → Cyberpunk&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Early in my career I saw SQL as something to avoid or abstract away, but with
time I&amp;rsquo;ve come to love munging data using SQL.&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://modern-sql.com/caniuse/T131" rel="nofollow noopener noreferrer"&gt;https://modern-sql.com/caniuse/T131&lt;/a&gt;&amp;nbsp;&lt;a href="#fnref1"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
